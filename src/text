// import { Router } from "express"

//  user.model.js  
// import mongoose, { Schema } from "mongoose";
// import bcrypt from "bcryptjs";
// import jwt from "jsonwebtoken";

// const userSchema = new mongoose.Schema({
//     username: {
//         type: String,
//         required : true,
//         unique: true,
//         lowercase: true,
//         index: true,   // very useful for faster search. It jumps directly to the letter which is typed
//         trim: true
//     },
//     email: {
//         type: String,
//         required : true,
//         unique: true,
//         lowercase: true,
//         trim: true
//     },
//     fullname: {
//         type: String,
//         required : true,
//         trim: true,
//         index: true
//     },
//     avatar: {
//         type: String,  //cloudinary url
//         required : true,
//     },
//     coverImage: {
//         type: String
//     },
//     watchHistory: [
//         {
//         type: Schema.Types.ObjectId,
//         ref: "Video"
//         }
//     ],
//     password: {
//         type: String, //bcrypt stores password in encrypted form
//         required : true,
//     },
//     refreshToken: {
//         type: String //jwt is a bearer token
//     }
//     }, {timestamps: true});

//     userSchema.pre("save", async function(next){
//         if(this.isModified("password")){
//             this.password = bcrypt.hash(this.password, 10);
//             next();
//         }
//     });

//     userSchema.methods.isPasswordCorrect = async function(password){
//         return bcrypt.compare(password, this.password);
//     }

//     userSchema.methods.generateAccessToken = function(){
//         return jwt.sign(
//         {
//             username: this.username,
//             email: this.email,
//             fullname: this.fullname,
//             _id: this._id,
//         },
//         process.env.ACCESS_TOKEN_SECRET,
//         {
//             expiresIn: process.env.ACCESS_TOKEN_EXPIRY
//         }
//     )
//     }

//     userSchema.methods.generateRefreshToken= function(){
//         return jwt.sign(
//             {
//                 username: this.username,
//                 email: this.email,
//                 fullname: this.fullname,
//                 _id: this._id,
//             },
//             process.env.REFRESH_TOKEN_SECRET,
//             {
//                 expiresIn: process.env.REFRESH_TOKEN_EXPIRY
//             }
//         )
//     }
//     export const User = mongoose.model("User", userSchema);


// controllers/user.controller.js
// import { asyncHandler } from "../utils/asyncHandler.js";
// import { ApiError } from "../utils/ApiError.js";
// import { User } from "../models/user.model.js";
// import bcrypt from "bcryptjs";

// const registerUser = asyncHandler(async (req, res) => {
//   const { username, email, fullname, password } = req.body;

//   if (!fullname?.trim()) throw new ApiError(400, "Fullname is required");
//   if (!username?.trim()) throw new ApiError(400, "Username is required");
//   if (!email?.trim()) throw new ApiError(400, "Email is required");
//   if (!password || password.length < 6) throw new ApiError(400, "Password must be at least 6 characters");

//   const existingUser = await User.findOne({ $or: [{ email }, { username }] });
//   if (existingUser) throw new ApiError(409, "User already exists with this email or username");

//   const avatarFile = req.files?.avatar?.[0];
//   const coverImageFile = req.files?.coverImage?.[0];
//   if (!avatarFile) throw new ApiError(400, "Avatar image is required");

//   const avatarUrl = avatarFile.path || avatarFile.filename;
//   const coverImageUrl = coverImageFile?.path || coverImageFile?.filename || "";

//   const hashedPassword = await bcrypt.hash(password, 10);

//   const newUser = await User.create({
//     username,
//     email,
//     fullname,
//     password: hashedPassword,
//     avatar: avatarUrl,
//     coverImage: coverImageUrl,
//   });

//   const userResponse = {
//     _id: newUser._id,
//     username: newUser.username,
//     email: newUser.email,
//     fullname: newUser.fullname,
//     avatar: newUser.avatar,
//     coverImage: newUser.coverImage,
//   };

//   res.status(201).json({
//     success: true,
//     message: "User registered successfully",
//     user: userResponse,
//   });
// });

// export { registerUser };


// Router/user.routes.js
// import express from "express";
// import { registerUser } from "../controllers/user.controller.js";
// import {upload} from "../middlewares/multer.middleware.js";

// const router = express.Router();

// router.route("/register").post(
//     upload.fields([{
//         name: "avatar",
//         maxCount:1
//     },
//     {
//         name: "coverImage",
//         maxCount:1
// }]),
//     registerUser 
// );
// // router.route.post("/register", (req, res) => {
// //     res.status(200).json({ message: "User registered!" });
// //   });
// export default router;

// index.js
// import express from "express"
// import mongoose from "mongoose"
// import { DB_NAME } from "./constants.js"
// import dotenv from "dotenv";
// import  connectDB from "./db/index.js"

// const app= express();

// dotenv.config({
//     path: './.env'
// });


// connectDB()
// .then(()=>{
//     app.listen(process.env.PORT || 8000, ()=>{
//         console.log("Server is running on port: ", process.env.PORT);
// })
//    })
// .catch((error)=>{
//     console.log("Connection fails here, the error is: ",error);
// })




// const app = express();
// (async () => {
//     try{
//         await mongoose.connect(`${process.env.MONGODB_URI}/${DB_NAME}`)
//         app.on("error", (error)=>{
//             console.log("ERROR: ",error);
//             throw error;
//         })
//         app.listen(process.env.PORT, ()=>{
//             console.log("Server is running on port: ", process.env.PORT);
//         })
//     }
//     catch(error){
//         console.log("ERROR: ",error);
//         throw error;
//     }
// })
// It is a good approach to use async/await with try/catch but we will use more proffesional way we will write in a folder named db and then import it here this will make code clean and easy to read


// app.js

// import express from "express";
// import cookieParser from "cookie-parser";
// import cors from "cors";

// const app = express();


// app.use(cors({
//     origin: process.env.CORS_ORIGIN,
//     credentials: true,
// }))

// app.use(express.json());
// app.use(urlencoded({extended: true, limit: "15kb"}));
// app.use(express.static("public"));
// app.use(cookieParser());

// //routes import
// import {userRoutes} from "./routes/user.routes.js";

// //routes decaration
// app.use("/api/v1/user", userRoutes);
// app.use((req, res, next) => {
//     res.status(404).type("text/html").send("404 Not Found");
//   });

// export {app};

